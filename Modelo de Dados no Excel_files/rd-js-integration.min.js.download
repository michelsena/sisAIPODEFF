/*! Resultados Digitais - Wed Mar 11 2020 10:36:39 GMT-0300 (Brasilia Standard Time) */
/* globals CreditCard */

let FormFields = (function FormFields() {
  const REJECTED_FIELDS = [
    'captcha',
    '_wpcf7',
    '_wpcf7_version',
    '_wpcf7_unit_tag',
    '_wpnonce',
    '_wpcf7_is_ajax_call',
    '_wpcf7_locale',
    'g-recaptcha-response',
    '_viewstate',
    '_previouspage',
    '_viewstategenerator',
    'payment.creditcardholdercpf',
    'payment.creditcardexpirationmonth',
    'payment.creditcardexpirationyear',
    'payment.creditcardsecuritycode',
    'payment.creditcardholder',
    'payment.creditcardtype'
  ];

  function convertHTMLCollectionToArray(fields) {
    let fieldsArray = [];

    for (let index = 0; index < fields.length; index += 1) {
      fieldsArray.push(fields[index]);
    }

    return fieldsArray;
  }

  function allowedFieldsFilter(input) {
    let name = jQuery(input).attr('name') || '';
    let value = input.value;
    let creditCardNumber = RDIntegrationCreditCard.validNumber(value);
    let blacklisted = REJECTED_FIELDS.indexOf(name.toLowerCase()) >= 0;
    return !blacklisted && !creditCardNumber;
  }

  function retrieveAllowedFields(form) {
    let inputs = jQuery(form).find(':input').not(':password');
    let inputsArray = convertHTMLCollectionToArray(inputs);
    let allowedFields = inputsArray.filter(allowedFieldsFilter);
    return jQuery(allowedFields).serializeArray();
  }

  function hasNameEmail(fieldName) {
    return fieldName.replace(/[\s_-]/g, '').toLowerCase().indexOf('email') > -1;
  }

  function isEmailField(field) {
    let hasTypeEmail = false;
    //let currentField = form[field.name];
    let currentField = field.type;
    if (currentField) {
      //hasTypeEmail = currentField.type === 'email';
      hasTypeEmail = currentField === 'email';
    }

    return hasNameEmail(field.name) || hasTypeEmail;
  }

  function findEmail(fieldMapping) {
    let found = false;
    jQuery.each(fieldMapping, function findEmailCallback() {
      if (isEmailField(this) && this.value !== '') {
        this.name = 'email';
        found = true;
        return false;
      }
    });

    return found;
  }

  function singleFields(form) {
    let fields = jQuery(form).find(':input')
      .not(':password')
      .not(':submit')
      .not(':button')
      .not(':reset')
      .not(':checkbox')
      .not(':radio');

    let fieldsArray = convertHTMLCollectionToArray(fields);
    return fieldsArray.filter(allowedFieldsFilter);
  }

  return {
    findEmail: findEmail,
    singleFields: singleFields,
    retrieveAllowedFields: retrieveAllowedFields
  };
}());

class RDErrorNotifier {
  constructor(requestStatus, requestBody) {
    this.requestStatus = requestStatus;
    this.requestBody = requestBody;
  }

  notify() {
    let error = JSON.stringify({ status: this.requestStatus, body: this.requestBody });

    jQuery.ajax({
      type: 'POST',
      url: this.URL,
      data: error,
      dataType: 'json',
      crossDomain: true
    });
  }
}

RDErrorNotifier.prototype.URL = 'https://qtmlugypw3.execute-api.us-east-1.amazonaws.com/production';

var RDIntegrationCreditCard = (function () {
  function validNumber(creditCardNumber) {
    var ca;
    var sum = 0;
    var mul = 0;
    var number;
    var length;

    const MIN_LENGTH = 14;

    if (typeof creditCardNumber !== 'string') return false;

    number = creditCardNumber.replace(/\D/g, '');
    length = number.length;

    if (length < MIN_LENGTH) return false;

    while (length--) {
      ca = parseInt(number.charAt(length), 10) << mul;
      sum += ca - (ca > 9) * 9;
      // 1 <--> 0 toggle.
      mul ^= 1; // mul = 1 - mul;
    }
    return (sum % 10 === 0) && (sum > 0);
  }

  return {
    validNumber: validNumber
  };
}());

// Export node module.
if (typeof module !== 'undefined' && module.hasOwnProperty('exports')) {
  module.exports = RDIntegrationCreditCard;
}

var FieldMapping = (function FieldMapping() {
  var fieldMapping = [];

  function resetFieldMapping() {
    fieldMapping = [];
  }

  function prettifiedNameAttribute(field) {
    let underscoredName;
    let prettifiedName;
    let fieldName = field.getAttribute('name');
    const leftSquareBrackets = /\[/g;
    const rightSquareBrackets = /\]/g;

    if (!fieldName) return false;

    underscoredName = fieldName.replace(leftSquareBrackets, '_');
    prettifiedName = underscoredName.replace(rightSquareBrackets, '');

    return (field.type === 'checkbox') ? `${prettifiedName}[]` : prettifiedName;
  }

  function findFieldLabel(input) {
    var labelByForAttribute = jQuery('label[for="' + input.id + '"]')[0];
    var closestLabel = jQuery(input).closest('label')[0];
    var label = labelByForAttribute || closestLabel;
    return label ? label.innerText.trim() : false;
  }

  function findFieldName(index, field) {
    var fieldType = field.getAttribute('type');
    var defaultName = 'Field ' + index + ' ' + fieldType;
    return prettifiedNameAttribute(field) || findFieldLabel(field) || field.getAttribute('id') || defaultName;
  }

  function pushFieldsToFieldMapping(fields) {
    jQuery(fields).map(function addFieldToMapping(index, field) {
      fieldMapping.push({
        name: findFieldName(index, field),
        value: field.value,
        type: field.type
      });
      return false;
    });
  }

  function mapSingleFields($form) {
    let fields = FormFields.singleFields($form[0]);
    pushFieldsToFieldMapping(fields);
  }

  function mapCheckboxesFields($form) {
    var $checkboxes = $form.find(':checkbox:checked[name]').clone();
    $checkboxes.each(function checkboxName(index, field) {
      field.name = field.name.split('.')[0];
    });
    pushFieldsToFieldMapping($checkboxes);
  }

  function mapRadioFields($form) {
    var $radioFields = $form.find(':radio:checked');
    pushFieldsToFieldMapping($radioFields);
  }

  function mapFields($form) {
    resetFieldMapping();
    mapSingleFields($form);
    mapCheckboxesFields($form);
    mapRadioFields($form);
    return fieldMapping;
  }

  return {
    mapFields: mapFields
  };
}());

var RdIntegrationIdentifier = (function RdIntegrationIdentifier() {
  function actionValue(form) {
    var action = form[0].action;
    if (typeof action === 'object') { return action.value; }
    return typeof action !== 'undefined' ? action : '';
  }

  function formHasDynamicIdentifier($form) {
    var index;
    var dynamic = false;
    var actionTypes = ['squarespace.com', 'realty_ajax_shortcode_contact_form'];

    for (index = 0; index < actionTypes.length; index += 1) {
      if (actionValue($form).indexOf(actionTypes[index]) > -1) {
        dynamic = true;
      }
    }
    return dynamic;
  }

  function formId($form) {
    if (formHasDynamicIdentifier($form)) {
      return false;
    }
    return $form.attr('id');
  }

  function conversionIdentifier($form) {
    var pathname = window.location.pathname === '/' ? 'home' : window.location.pathname;
    return $form.attr('name') || formId($form) || pathname;
  }

  return {
    identifier: conversionIdentifier
  };
}());

var RdIntegration = (function () {
  'use strict';

  var $form,
    $token_rdstation,
    $identifier,
    $options,
    $accountSettings,
    $,

    _withjQuery = function (callback) {
      if (typeof jQuery === "undefined") {
        _loadScript("https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js", callback);
      } else {
        callback();
      }
    },

    _integrate = function (token_rdstation, identifier, options) {
      _withjQuery(function () {
        $ = jQuery;
        _setParams(token_rdstation, identifier, options);
        _bindSubmitCallback();
        _initDebugMode();
      });
    },

    _setParams = function (token_rdstation, identifier, options) {
      $options = options || {};
      $token_rdstation = token_rdstation;
      $identifier = identifier;
    },

    _loadScript = function (scriptSource, callback) {
      var head = document.getElementsByTagName('head')[0],
        script = document.createElement('script');

      script.type = 'text/javascript';
      script.src = scriptSource;
      // most browsers
      script.onload = callback;
      // IE 6 & 7
      script.onreadystatechange = function () {
        if (this.readyState === 'complete') {
          callback();
        }
      };
      head.appendChild(script);
    },

    _bindSubmitCallback = function () {
      $(':submit').click(_submitClickHandler);
    },

    _submitClickHandler = function (event) {
      $accountSettings = _getAccountSettings();

      $form = _findForm(event.target);
      if (!$form) return;

      let allowedFields = FormFields.retrieveAllowedFields($form);

      if (!FormFields.findEmail(allowedFields)) return;

      let inputs = _prepareFormData(allowedFields);

      if (typeof $form[0].checkValidity === 'function') {
        if (!$form[0].checkValidity()) {
          return;
        }
      }
      _post(inputs, _submitForm);
      event.preventDefault();

    },

    _findForm = function (button) {
      return $(button).closest('form:not([data-internal-rdstation-form])');
    },

    _prepareFormData = function (allowedFields) {
      let inputs = _fieldMap(allowedFields);
      inputs.push($accountSettings.identifier, $accountSettings.token, _getQueryParams());
      return inputs;
    },

    _fieldMap = function (inputs) {
      if ($options.fieldMapping) {
        inputs = _translateFields(inputs);
      }
      return inputs;
    },

    _translateFields = function (inputs) {
      $.each(inputs, function () {
        var newName = $options.fieldMapping[this.name];
        if (newName) {
          this.name = newName;
        }
      });
      return inputs;
    },

    _submitForm = function () {
      if (_actionIsValid($form)) {
        $form.submit();
      } else {
        $form.find(':submit').unbind('click', _submitClickHandler).click();
      }
    },

    _actionIsValid = function (form) {
      var action = form.attr('action');
      return typeof action !== "undefined" && action.trim() !== "";
    },

    _getAccountSettings = function () {
      return {
        identifier: {
          name: 'identificador',
          value: $identifier
        },
        token: {
          name: 'token_rdstation',
          value: $token_rdstation
        }
      };
    },

    _read_cookie = function (name) {
      var cookies = document.cookie.split(';'),
        d,
        cookie;

      name = name + '=';

      for (d = 0; d < cookies.length; d++) {
        cookie = cookies[d];
        while (cookie.charAt(0) === ' ') { cookie = cookie.substring(1, cookie.length); }
        if (cookie.indexOf(name) === 0) {
          return cookie.substring(name.length, cookie.length);
        }
      }
      return null;
    },

    _getQueryParams = function () {
      return {
        name: 'query_params',
        value: location.search.substring(1)
      };
    },

    _getCookieId = function () {
      var leadTrackingCookie = _read_cookie("rdtrk");
      if (leadTrackingCookie !== null) {
        leadTrackingCookie = JSON.parse(unescape(leadTrackingCookie));
        return leadTrackingCookie.id;
      }
    },

    _insertClientId = function (formData) {
      var client_id = _getCookieId();
      if (typeof client_id !== "undefined") {
        formData.push({ name: 'client_id', value: client_id });
      }
      return formData;
    },

    _insertCookieValues = function (formData) {
      var utmzValue = _read_cookie('__utmz');
      var trafficSourceValue = _read_cookie('__trf.src');

      utmzValue && formData.push({ name: 'c_utmz', value: utmzValue });
      trafficSourceValue && formData.push({ name: 'traffic_source', value: trafficSourceValue });

      return formData;
    },

    _insertInternalSource = function (formData, internalSource) {
      formData.push({ name: '_is', value: internalSource });
      return formData;
    },

    _post = function (formData, callback, internalSource) {
      var endpoint;
      var errorNotifier;

      internalSource = internalSource || 3;
      endpoint = (internalSource === 10) ? 'form-integrations' : 'conversions';
      formData = _insertClientId(formData);
      formData = _insertCookieValues(formData);
      formData = _insertInternalSource(formData, internalSource);
      _withjQuery(function () {
        jQuery.ajax({
          type: 'POST',
          url: 'https://www.rdstation.com.br/api/1.3/' + endpoint,
          data: formData,
          crossDomain: true,
          xhrFields: { withCredentials: true },
          warn: function (response) {
            console.log("ERROR - ");
            console.log(response);
          },
          complete: function requestCompletedCallback(jqXHR, textStatus) {
            if (jqXHR.status >= 500) {
              errorNotifier = new RDErrorNotifier(jqXHR.status, formData);
              errorNotifier.notify();
              return;
            }

            if (callback) {
              callback(jqXHR, textStatus);
            }
          },
          beforeSend: function beforeSendPostCallback() { }
        });
      });
    },

    _initDebugMode = function () {
      if ($options.debugMode === true) {
        _analyse();
      }
    },

    _analyse = function () {
      _withjQuery(function () {
        $ = jQuery;
        $options = $options || {};

        console.info('Iniciando');

        var submitButtons = $(_getElementSubmit()),
          forms = _findForm(submitButtons);

        if (submitButtons.length === 0) {
          console.warn('Nenhum botao de submit encontrado');
        } else {
          console.info('Botoes de submit encontrados: ' + submitButtons.length);
        }

        if (forms.length === 0) {
          console.warn('Nenhum formulario encontrado');
        } else {
          console.info('Formularios encontrados: ' + forms.length);
        }

        _analyseForms(forms);

        console.info('Finalizado');
      });
    },

    _analyseForms = function (forms) {
      $accountSettings = _getAccountSettings();

      $.each(forms, function (index, form) {
        var inputs = _prepareFormData(form),
          mappedFields = [];

        console.log('');
        console.info(index + 1 + ' formulario');

        if (!FormFields.findEmail(form)) {
          console.warn('Campo de email nao encontrado');
        } else {
          console.info('Campo de email encontrado');
        }

        $.each(inputs, function (index, input) {
          mappedFields.push(input.name);
        });

        console.info('Campos mapeados: ' + mappedFields.join(", "));
      });

      console.log('');
    },

    _integrateAll = function (token_rdstation, options) {
      $options = options || {};
      $token_rdstation = token_rdstation;

      _withjQuery(function () {
        if (localStorage.getItem('RdIntegrationFormData')) { _sendPendingPosts(); }
        _bindForms();
      });
    },

    _bindForms = function () {
      var forms = jQuery('form:not(:has(input[name="internal_source"],input[name="_is"]))');
      jQuery(forms).submit(_submitHandler);
    },

    _submitHandler = function (event) {
      var $form = jQuery(event.target).closest('form');
      var fieldMapping = FieldMapping.mapFields($form);

      if (!FormFields.findEmail(fieldMapping)) return;

      $identifier = RdIntegrationIdentifier.identifier($form);

      _triggerPost(fieldMapping);
    },

    _triggerPost = function (inputsData) {
      inputsData = _insertDefaultParameters(inputsData);
      _setPendingSubmissionStatus(inputsData);
      _post(inputsData, function (jqXHR) {
        _resetPendingSubmission(jqXHR);
      }, 10);
    },

    _insertDefaultParameters = function (inputsData) {
      inputsData.push(
        { name: 'identificador', value: $identifier },
        { name: 'token_rdstation', value: $token_rdstation },
        { name: 'form_url', value: location.href.split('?')[0] },
        { name: 'page_title', value: document.title }
      );

      return inputsData;
    },

    _setPendingSubmissionStatus = function (inputsData) {
      localStorage.setItem('RdIntegrationFormData', JSON.stringify(inputsData));
    },

    _sendPendingPosts = function () {
      var inputsData = JSON.parse(localStorage.getItem('RdIntegrationFormData'));
      _post(inputsData, function (jqXHR) {
        _resetPendingSubmission(jqXHR);
      }, 10);
    },

    _resetPendingSubmission = function (jqXHR) {
      if (jqXHR.readyState === 4) { localStorage.removeItem('RdIntegrationFormData'); }
    };

  return {
    integrate: _integrate,
    post: _post,
    analyse: _analyse,
    integrateAll: _integrateAll
  };

}());

function RDStationFormIntegration(token_rdstation, identifier, options) {
  'use strict';
  RdIntegration.integrate(token_rdstation, identifier, options);
}
